/*simple selector*/
p {
  /*element*/
  text-align: center;
  color: red;
}

#para1 {
  /*id*/
  text-align: center;
  color: red;
}

.center {
  /*className*/
  text-align: center;
  color: red;
}

* {
  /*Universal Selector (apply to all)*/
  text-align: center;
  color: blue;
}

h1,
h2,
p {
  /*grouping selector*/
  text-align: center;
  color: red;
}

p.intro {
  /*element.class*/
  color: aqua;
}

.color {
  background-color: DodgerBlue; /*bg color*/
  color: Tomato; /*text comments*/
  border: 2px solid Tomato; /*border color*/
}

.background {
  background-color: lightblue;
  opacity: 0.3; /*BG opacity techniques*/
  background: rgba(
    0,
    128,
    0,
    0.3
  ); /* Green background with 30% opacity. same as above */
  background-image: url('bgdesert.jpg'); /*Note: When using a background image, use an image that does not disturb the text*/
  /**
   *repeat horizontally
   *@repeat-y
   *@no-repeat
   */
  background-repeat: repeat-x;
  background-position: right top;
  background-attachment: fixed; /*image position: scroll | fixed*/
}

/**
BG Order:
  background-color
  background-image
  background-repeat
  background-attachment
  background-position

Border Order
  border-width
  border-style (required)
  border-color

*/
.background,
.shorthand {
  background: #ffffff url('img_tree.png') no-repeat right top;
}

.border {
  border-style: dotted;

  border-right-style: solid;
  border-bottom-style: dotted;
  border-left-style: solid;

  border-style: dotted dashed solid double; /*top right bottom left*/
  border-style: dotted solid double; /*top: dot - left, right: solid - bottom: double*/
  border-style: dotted solid; /*top, bottom: dotted - left, right: solid*/
  border-style: dotted; /*all dotted*/

  border-width: 5px; /*medium|thick*/
  border-width: 25px 10px 4px 35px; /*top right bottom left*/

  border-color: green;
  border-color: red green blue yellow; /*top right bottom left*/

  border: 5px solid red; /*short-hand*/
  border-left: 6px solid red;
  border-radius: 5px; /*can't be short-handed*/
}

.margin {
  margin-top: 100px;
  margin-bottom: 100px;
  margin-right: 150px;
  margin-left: 80px;

  margin: 25px 50px 75px 100px;
  margin: 25px 50px 75px; /*t-25, l,r-50, b-75*/
  margin: 25px 50px; /*t,b-25, l,r-50*/
  margin: 25px; /*t,r,b,l-25*/
  margin: auto; /*auto padding horizontally to center of its container*/
  margin-left: inherit; /*inherit from parents*/
  margin: 0 0 50px 0; /*margin-right: 50px*/
}

.padding {
  padding-top: 50px;
  padding-right: 30px;
  padding-bottom: 50px;
  padding-left: 80px;

  padding: 25px 50px 75px 100px;
  padding: 25px 50px 75px; /*t-25, l,r-50, b-75*/
  padding: 25px 50px; /*t,b-25, l,r-50*/
  padding: 25px; /*t,r,b,l-25*/

  width: 300px;
  padding: 25px; /*=> total width = 350*/
  box-sizing: border-box; /*=> keep the witdh at 300px by subtracting the content area width*/
}

/*
auto - This is default. The browser calculates the height and width (inline vs block element)
length - height/width in px, cm etc.
% - percent to parent container
initial - default value?
inherit - inherited from its parent
*/
.widthHeight {
  height: 200px;
  width: 50%;
  max-width: none; /*length unit | % | none*/
  background-color: powderblue;
}

/*CSS Outline*/
/*
width:
    thin (typically 1px)
    medium (typically 3px)
    thick (typically 5px)
    A specific size (in px, pt, cm, em, etc)
*/
.outline {
  outline-style: dotted; /*dashed | solid  | double | groove | ridge | inset | outset | none | hidden*/
  outline-color: powderblue; /*HEX, RGB and HSL*/
  outline-width: 100px; /*thin | medium | thick => outline border width*/
  outline-offset: 10px; /*space between outline and border*/
  outline: 5px solid yellow; /*width style color*/
}

/*TEXT AND FONT*/
/*
shorthand: 
    font-style
    font-variant
    font-weight
    font-size/line-height   (required)
    font-family (required)
*/
.text {
  background-color: lightgrey;
  color: blue;
  text-align: center; /*right left center justify: just like wordOffice*/

  vertical-align: baseline; /*same line*/
  vertical-align: text-top;
  vertical-align: text-bottom;
  vertical-align: sub;
  vertical-align: super;

  direction: rtl; /*like dbo tag*/
  unicode-bidi: bidi-override;

  text-decoration: none; /*like office: underline, bold, itatlic, etc.*/
  text-decoration: overline;
  text-decoration: line-through;
  text-decoration: underline;

  text-transform: uppercase;
  text-transform: lowercase;
  text-transform: capitalize; /*capitalize every first character of the word*/

  letter-spacing: 5px; /*space between letters*/
  letter-spacing: -1px;

  line-height: 0.8; /*space between lines*/

  text-indent: 50px; /*1st line indent*/

  word-spacing: 10px; /*space between words*/

  white-space: nowrap; /**/
  white-space: normal;
  white-space: pre;
  white-space: pre-line;
  white-space: pre-wrap;

  text-shadow: 2px 2px;
  text-shadow: 2px 2px red;
  color: white;
  text-shadow: 2px 2px 4px #000000;

  /*font-safe: https://www.w3schools.com/css/css_font_websafe.asp*/
  font-family: 'Times New Roman', Times, serif; /*start with preferred one and end with font family*/

  font-style: normal; /*normal | italic | oblique */
  font-weight: bold;

  font-size: 40px; /*default: 16px = 1em | vw: viewport width".*/

  font: italic small-caps bold 12px/30px Georgia, serif;
  font: 20px Arial, sans-serif;
}

/* CSS LINK*/
/* unvisited link */
/* attention: order does matter!!*/
a:link {
  color: red;
  cursor: auto; /*cursor type: crosshair |e-resize |help, etc. https://www.w3schools.com/css/css_link.asp*/
}

/* visited link */
a:visited {
  color: green;
}

/* mouse over link */
a:hover {
  color: hotpink;
}

/* selected link */
a:active {
  color: blue;
}

/*CSS Lists*/
ul.a {
  list-style-type: circle;
  list-style-type: square;
  list-style-type: upper-roman;
  list-style-type: lower-alpha;
  list-style-type: none;
  list-style-image: url('sqpurple.gif'); /*image item marker*/

  list-style-position: outside;
  list-style-position: inside; /*as part of text content*/
}

ul.override-list-padding {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

/*
short-hand order:
    list-style-type
    list-style-position
    list-style-image
*/
ul {
  list-style: square inside url('sqpurple.gif');
}

ol li {
  /*style of ol and child li*/
  background: #ffe5e5;
  padding: 5px;
  margin-left: 35px;
}

/*TABLE STYLE*/
/*watch table.css*/
table {
  width: 100%;
  border-collapse: collapse;
  border: 1px solid black;
}
th,
td {
  height: 70px;
  text-align: center; /*text align for td and th*/
  vertical-align: middle; /*top bottom middle*/
  padding: 15px;
  border-bottom: 1px solid #ddd; /*bottom line*/
}

tr:hover {
  background-color: yellow;
}

th {
  background-color: #04aa6d;
  color: white;
}

div.containedTable {
  overflow-x: auto; /*reponsive table*/
}

caption {
  caption-side: bottom; /*caption position*/
  border-spacing: 4px; /*border + border-spacing + next cell*/
}

/*CSS LAYOUT*/
/*
Examples of block-level elements:
    <div>
    <h1> - <h6>
    <p>
    <form>
    <header>
    <footer>
    <section>
Examples of inline elements:
    <span>
    <a>
    <img>
*/
div.cssLayout {
  display: block; /*default of block element*/
  display: inline; /*default of inline element*/
  display: none; /*remove component area from the DOM*/
  visibility: hidden; /*hidden the content, the block area style there*/
}

li.overrideLayout {
  display: inline; /*override from block to inline*/
}

div.normalWidth {
  width: 500px;
  margin: auto; /*align center using margin spaces*/
}

div.maxWidth {
  max-width: 500px; /*browser will adjust the width by window size*/
  margin: auto;
}

/*
There are five different position values:
    static      (default)
    relative    relative to its normal position. eg: left + normalDivFlow
    fixed       relative to the viewport
    absolute    relative to the nearest positioned element ancestor. no ancestor => <body/>
                play attention to the positioned parents
                can overlap other element
    sticky      relative to its normal position (like relative) or the scroll position (like fixed). 
*/
div.position {
  position: static;
}
div.sticky {
  position: -webkit-sticky; /* for Safari */
  position: sticky;
  top: 0; /*relative position equal to zero (not changed, but required in order to be effective)*/
  background-color: green;
  border: 2px solid #4caf50;
}
.container {
  position: relative; /*set parent to relative before set child position to absolute for the correctness*/
  clip-path: rect(
    0px,
    60px,
    200px,
    0px
  ); /*clip the container by: top, right, bottom, left*/
}
/*
NOTE: z-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky) 
and flex items (elements that are direct children of display: flex elements).
*/
div.zIndex {
  position: absolute;
  left: 0px;
  top: 0px;
  z-index: -1;
}

/*
NOTE: The overflow property only works for block elements with a specified height.
The overflow property has the following values:
    visible - DEFAULT. The overflow is not clipped. The content renders OUTSIDE the element's box
    hidden - The overflow is CLIPPED, and the rest of the content will be invisible
    scroll - The overflow is CLIPPED WITH SCROLLBAR is added to see the rest of the content
    auto - Similar to scroll, but it adds scrollbars ONLY when necessary
*/
div.overFlow {
  overflow: visible;
  overflow-x: hidden;
  overflow-y: scroll;
  overflow-wrap: normal;
  overflow-wrap: anywhere;
  overflow-wrap: break-word; /*break long word*/
}

/*
The float property can have one of the following values:
    left - The element floats to the left of its container
    right - The element floats to the right of its container
    none - The element does not float (will be displayed just where it occurs in the text). This is default
    inherit - The element inherits the float value of its parent
*/
div.float {
  float: left; /*turn block -> inline + bring below content up*/
  float: right; /*eg: div = inline => float right => text bellow fill in its space*/
}

/*
the clear Property
    -  set the next element below (not on right or left)

The clear property can have one of the following values:
    none - DEFAULT. Not pushed below left or right floated elements.
    left - The element is pushed below LEFT floated elements
    right - The element is pushed below RIGHT floated elements
    both - The element is pushed below both LEFT and RIGHT floated elements
    inherit - The element inherits the clear value from its parent
*/
div.layoutClear {
  clear: left;
  overflow: auto; /*use if floated element taller than container*/
}

/*FLOAT EXAMPLE*/
* {
  box-sizing: border-box; /*keeping the elements into the box and does not break when adding extra padding, margin, etc.*/
}

.box {
  float: left;
  width: 33.33%; /* three boxes (use 25% for four, and 50% for two, etc) */
  padding: 50px; /* if you want space between the images */
}

div.layoutInlineBox {
  display: inline; /*dont breakline, size equal to content size*/
  display: inline-block; /*like inline, but adding ability to set width and height*/
  display: block; /*breakline, witdth 100% when possible*/
}

/*H AND V ALIGN*/
.HCenter {
  margin: auto; /*align center*/
  width: 50%; /*prevent from strecthing out of its container*/
  border: 3px solid green;
  padding: 10px;
}

.HTextCenter {
  text-align: center;
  border: 3px solid green;
}
.HImageCenter {
  display: block;
  margin-left: auto;
  margin-right: auto;
  /*or margin:auto; */
  width: 40%;
}

.Vcenter {
  padding: 70px 0; /*using equal top and bottom padding*/
  border: 3px solid green;
}

.HVCenter {
  padding: 70px 0; /*V Center*/
  border: 3px solid green;
  text-align: center; /*H Center*/
}

.HVcenter {
  height: 200px;
  position: relative;
  border: 3px solid green;
}

.HVcenter p {
  margin: 0;
  position: absolute;
  top: 50%; /*init position in top left 50*/
  left: 50%;
  transform: translate(-50%, -50%); /*translate it selft to its center*/
}

.HVFlexcenter {
  display: flex;
  justify-content: center; /*only in flex*/
  align-items: center; /*only in flex*/
  height: 200px;
  border: 3px solid green;
}

/*CSS Combinators*/
/*
There are four different combinators in CSS:
    descendant selector (space)
    child selector (>)
    adjacent sibling selector (+)
    general sibling selector (~)
*/

div p {
  /*all p descendant*/
  background-color: yellow;
}

div > p {
  /*all div direct p childs not descendant*/
  background-color: yellow;
}

div + p {
  /*adjacent/next siblings*/
  background-color: yellow;
}

div ~ p {
  /*all siblings (can be more than 2)*/
  background-color: yellow;
}

/*
A pseudo-class is used to define a special state of an element.
For example, it can be used to:
    Style an element when a user mouses over it
    Style visited and unvisited links differently
    Style an element when it gets focus
syntax:
    selector:pseudo-class {
        property: value;
    }
*/

a.highlight:hover {
  /*class and pseudo*/
  color: #ff0000;
}

div:hover {
  /*element and pseudo*/
  background-color: blue;
}

/*first child*/
p {
  /*to all p*/
  color: blue;
}

p:first-child {
  /*to the first p of any container*/
  color: blue;
}

p i:first-child {
  /*to the first i of any p*/
  color: blue;
}

p:first-child i {
  /*to all i of the first p inside any container*/
  color: blue;
}

/*PSEUDO-ELEMENT*/
/* used to style specified parts of an element.
For example, it can be used to:
    Style the first letter, or line, of an element
    Insert content before, or after, the content of an element

Syntax: 
    selector::pseudo-element {
        property: value;
    }

Ref: https://www.w3schools.com/css/css_pseudo_elements.asp
*/

p::first-line {
  /*first line of p . only for block-element*/
  color: #ff0000;
  font-variant: small-caps;
}

p::first-letter {
  color: #ff0000;
  font-size: xx-large;
}

h1::before {
  /*insert some content before the content of an element.*/
  content: url(smiley.gif);
}

h1::after {
  content: url(smiley.gif);
}

::marker {
  /*list marker style*/
  color: red;
  font-size: 23px;
}

::selection {
  /*style the selected text parts*/
  color: red;
  background: yellow;
}

/*CSS OPACITY (THE TRANSPARENCY)*/
img {
  opacity: 0.5;
}

img:hover {
  opacity: 1;
}

/*CSS NAV-BAR*/
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

li a {
  /*vertical nav-bar*/
  display: block; /*make the whole area clickable*/
  width: 60px;
}

/*better vertical navbar*/
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  width: 200px;
  background-color: #f1f1f1;
}

li a {
  display: block;
  color: #000;
  padding: 8px 16px;
  text-decoration: none;
}

/* Change the link color on hover */
li a:hover {
  background-color: #555;
  color: white;
}

/*adding border to navbar*/
ul {
  border: 1px solid #555;
}

li {
  text-align: center;
  border-bottom: 1px solid #555;
}

li:last-child {
  border-bottom: none;
}

/*FULL - HEIGHT SIDE BAR*/
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  width: 25%;
  background-color: #f1f1f1;
  height: 100%; /* Full height */
  position: fixed; /* Make it stick, even on scroll */
  overflow: auto; /* Enable scrolling if the sidenav has too much content */
}

/*Horizontal navbar*/
li {
  display: inline;
}
/*or*/
li {
  float: left;
}

a {
  display: block;
  padding: 8px;
  background-color: #dddddd;
}

/*H Nav Bar example*/
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
  background-color: #333;
}

li {
  float: left;
}

li a {
  display: block;
  color: white;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
}

/* Change the link color to #111 (black) on hover */
li a:hover {
  background-color: #111;
}

ul {
  /*sticky H navbar*/
  position: -webkit-sticky; /* Safari */
  position: sticky;
  top: 0;
}

/*PRATICE - MY OWN DROP CONTENT*/
ul {
  list-style-type: none;
  background-color: black;
  overflow: hidden;
  padding: 0px 0px;
}

li {
  float: left;
}

li a {
  display: block;
  color: white;
  padding: 10px 16px;
}

li a:hover {
  background-color: gray;
}

.dropdown-content {
  display: none;
  position: absolute;
  background-color: gray;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
}

.dropdown:hover .dropdown-content {
  display: block;
}

.dropdown-content a:hover {
  background-color: black;
}

/*Image drop-down from the right side*/
.dropdownArea {
  display: inline-block;
  position: relative; /*set positioned element*/
}

.dropdownImg {
  width: 400px;
  display: none;
}

.dropdownArea:hover .dropdownImg {
  display: block;
  position: absolute;
  right: 0px;
  left: 50%; /*50% of container*/
  transform: translateX(-50%);
  right: 0; /*drop down right to left*/
  left: 0; /*left to right*/
}

/*CSS Counter Variable*/
/*
To work with CSS counters we will use the following properties:
  counter-reset - Creates or resets a counter
  counter-increment - Increments a counter value
  content - Inserts generated content
  counter() or counters() function - Adds the value of a counter to an element
*/
body {
  counter-reset: section; /*create variable name section*/
}

h2::before {
  counter-increment: section; /*functin body init*/
  content: 'Section ' counter(section) ': '; /*insert content*/
}

/*nesting counter*/
body {
  counter-reset: section;
}

h1 {
  counter-reset: subsection;
}

h1::before {
  counter-increment: section;
  content: 'Section ' counter(section) '. ';
}

h2::before {
  counter-increment: subsection;
  content: counter(section) '.' counter(subsection) ' ';
}

/*CSS WEBSITE LAYOUT*/
/* The navbar container */
.topnav {
  overflow: hidden;
  background-color: #333;
}

/* Navbar links */
.topnav a {
  float: left;
  display: block;
  color: #f2f2f2;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
}

/* Links - change color on hover */
.topnav a:hover {
  background-color: #ddd;
  color: black;
}

/*THREE COLUMN CONTENT*/
/* Create three equal columns that float next to each other */
.column {
  float: left;
  width: 33.33%;
}

/* Clear floats after the columns */
.row:after {
  content: '';
  display: table;
  clear: both;
}

/* Responsive layout - makes the three columns stack on top of each other instead of next to each other on smaller screens (600px wide or less) */
@media screen and (max-width: 600px) {
  .column {
    width: 100%;
  }
}

/*TWO COLUMN CONTENT*/
.column {
  float: left;
}

/* Left and right column */
.column.side {
  width: 25%;
}

/* Middle column */
.column.middle {
  width: 50%;
}

/* Responsive layout - makes the three columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
  .column.side,
  .column.middle {
    width: 100%;
  }
}


/*Specificity*/
.button {
  background-color: #8c8c8c !important; /*highest specificity of all*/
  color: white !important;
  padding: 5px !important;
  border: 1px solid black !important;
}

#myDiv a {
  color: red;
  background-color: yellow;
}


/*Math functions*/
#div1 {
  position: absolute;
  left: 50px;
  width: calc(100% - 100px);  /*clear right*/
  width: max(50%, 300px);
  width: min(50%, 300px);
  border: 1px solid black;
  background-color: yellow;
  padding: 5px;
}

