/*STEP 1: define Grid container*/

.grid-container {
  display: grid;
  display: inline-grid; /*grid-itms not streched out at full width*/
}

/*
<div class="grid-container">
  <div class="grid-item">1</div>
  <div class="grid-item">2</div>
  <div class="grid-item">3</div>
  <div class="grid-item">4</div>
  <div class="grid-item">5</div>
  <div class="grid-item">6</div>
  <div class="grid-item">7</div>
  <div class="grid-item">8</div>
  <div class="grid-item">9</div>
</div>
*/

.grid-container-other-properties {
  display: grid;

  grid-column-gap: 50px; /*grap between each columns*/
  grid-row-gap: 50px;
  grid-gap: 50px 100px; /*shorthand*/

  /*
    grid-template-columns - specify number of col and theirs width
  */
  grid-template-columns: auto auto auto auto; /*=> 4 col with same W*/
  grid-template-columns: 80px 200px auto 40px; /*4 col with diff width*/
  grid-template-rows: 80px 200px; /*2 row with diff H*/

  /*
    justify-content - align the whole grid inside the container.
    note: The grid's total width has to be less than the container's width for the justify-content property to have any effect. (like align-content)
  */
  grid-template-columns: 50px 50px 50px; /*Make the grid smaller than the container*/
  justify-content: space-evenly;
  justify-content: end;
  /*
    align-content - align the whole grid inside the container like justify-content but vertically.
    note: The grid's total width has to be less than the container's width for the justify-content property to have any effect. (like align-content)
  */
  align-content: center;
  align-content: start; /*not flex-start =))*/
}

/*
align-content and justify-content usage
.grid-container {
  display: grid;
  height: 400px;
  align-content: center;
  grid-template-columns: auto auto auto;
  grid-gap: 10px;
  background-color: #2196F3;
  padding: 10px;
}

.grid-container > div {
  background-color: rgba(255, 255, 255, 0.8);
  text-align: center;
  padding: 20px 0;
  font-size: 30px;
}
*/

.item1 {
  /*grid item's attrib*/
  grid-column-start: 1; /*start frm col 1 and stop strecthing at col 3*/
  grid-column-end: 3;

  grid-row-start: 1;
  grid-row-end: 3;

  grid-column: 1 / 5; /*shorthand: frm col 1 and stop strecthing at col 5*/
  grid-column: 1 / span 3; /*start at 1, and span 3*/
  grid-column: 2 / span 3; /*start at 2*/

  grid-row: 1 / 4;
  grid-row: 1 / span 2;

  grid-area: 1 / 2 / 5 / 6; /*start on row-line 1 and column-line 2, and end on row-line 5 and column line 6. rect shape*/
}

/*naming grid area and usecases. ya'll see*/
.item1 {
  grid-area: header;
}
.item2 {
  grid-area: menu;
}
.item3 {
  grid-area: main;
}
.item4 {
  grid-area: right;
}
.item5 {
  grid-area: footer;
}

.grid-container {
  display: grid;
  grid-template-areas:
    "header header header header header header"
    "menu main main main right right"
    "menu footer footer footer footer footer";
  grid-gap: 10px;
  background-color: #2196f3;
  padding: 10px;
}

.grid-container > div {
  background-color: rgba(255, 255, 255, 0.8);
  text-align: center;
  padding: 20px 0;
  font-size: 30px;
}

/*
<div class="grid-container">
  <div class="item1">Header</div>
  <div class="item2">Menu</div>
  <div class="item3">Main</div>  
  <div class="item4">Right</div>
  <div class="item5">Footer</div>
</div>
*/

/*
The Order of the Items
  visualization: https://www.w3schools.com/css/tryit.asp?filename=trycss_grid_flexible_order
*/
.item1 { grid-area: 1 / 3 / 2 / 4; }
.item2 { grid-area: 2 / 3 / 3 / 4; }
.item3 { grid-area: 1 / 1 / 2 / 2; }
.item4 { grid-area: 1 / 2 / 2 / 3; }
.item5 { grid-area: 2 / 1 / 3 / 2; }
.item6 { grid-area: 2 / 2 / 3 / 3; }