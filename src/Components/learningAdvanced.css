/*
                                            CSS ADVAMCED
*/
/*
  CSS Rounded Corners
  border-radius
  border-top-left-radius
  ...
*/

/*bodered image, background and none*/
#rcorners1 {
  border-radius: 25px;
  background: #73ad21;
  padding: 20px;
  width: 200px;
  height: 150px;
}

#rcorners2 {
  border-radius: 25px;
  border: 2px solid #73ad21;
  padding: 20px;
  width: 200px;
  height: 150px;
}

#rcorners3 {
  border-radius: 25px;
  background: url(paper.gif);
  background-position: left top;
  background-repeat: repeat;
  padding: 20px;
  width: 200px;
  height: 150px;
}

/*values*/
#rcorners1 {
  border-radius: 15px 50px 30px 5px; /*top-left, top-right*/
  border-radius: 15px 50px 30px; /*top-left, top-right and bottom-left, bottom-right*/
  border-radius: 15px 50px; /*topleft and bottom right, top-r, bottom-l*/
  border-radius: 15px;
}

/*cirle*/
#rcorners3 {
  border-radius: 50%;
  background: #73ad21;
  padding: 20px;
  width: 200px;
  height: 200px;
  height: 150px; /*ellipse*/
}

/*
  CSS IMAGE-BACKGROUND
  */
#multipleBG-2 {
  background-image: url(img_flwr.gif), url(paper.gif); /*stack on top, img_flwr closest*/
  background-position: right bottom, left top; /*first img (right bottom)*/
  background-repeat: no-repeat, repeat; /*first image (no repeat)*/
  background: url(img_flwr.gif) right bottom no-repeat,
    url(paper.gif) left top repeat; /*short-hand*/
  background-size: 100px 80px; /*width height | contain | cover*/
  background-size: contain; /*scale the img both W and H as much as possible*/
  background-size: cover; /*completely cover the img - some part can be cropped*/
  background-size: "no-background-size"; /*no size, original size*/

  /*multiple size example*/
  background: url(img_tree.gif) left top no-repeat,
    url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat;
  background-size: 50px, 130px, auto;

  /*center image on the screen (always)*/
  background: url(img_man.jpg) no-repeat center fixed;  /*BG image, background-repeat <=> BG-position, bg attachmment:fixed|scroll*/
  background-size: cover;

  background-origin: border-box; /*start from border*/
  background-origin: padding-box; /*start from padding*/
  background-origin: content-box;

  /*
      border-box - (default) the background is painted to the outside edge of the border
      padding-box - the background is painted to the outside edge of the padding
      content-box - the background is painted within the content box
    */
  background-clip: content-box; /*padding-box | border-box*/
}

/*hero image example (image with text aligned at center*/
.hero-image {
  background: url(img_man.jpg) no-repeat center;
  background-size: cover;
  height: 500px;
  position: relative;
}

.hero-text {
  text-align: center;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
}

/*COLOR KEY WORDS*/
/*transparent, currentcolor, and inherit keywords.*/
.color-keyword {
  background-color: transparent;
  background-color: transparent;

  color: blue;
  border: 10px solid currentcolor;

  border: inherit; /*frm parents*/
}

/*
    syntax: background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
    defined atleast 2 stop values
    direction def: top to bottom
      - to right (left to right)
      - to bottom right (top-left to bottom-right)
    angle def: 
      - 0 - to top
      - 90 - to right
      - 180 - to bottom
      - 360 - to left
  */
.linear-gradient {
  background-image: linear-gradient(red, yellow);
  background-image: linear-gradient(red, yellow, green); /*muti-stop color*/
  background-image: linear-gradient(
    to right,
    red,
    orange,
    yellow,
    green,
    blue,
    indigo,
    violet
  ); /*rainbow BG*/
  background-image: linear-gradient(
    to right,
    rgba(255, 0, 0, 0),
    rgba(255, 0, 0, 1)
  ); /*color with tranparency*/
  background-image: repeating-linear-gradient(
    red,
    yellow 10%,
    green 20%
  ); /*no need*/
}

.radial-gradient {
  background-image: radial-gradient(
    circle,
    red,
    yellow,
    green
  ); /*shape: circal | ellipse (def) | closest-side | farthest-side*/
}

.conic-gradient {
  background-image: conic-gradient(red, yellow, green); /**/
}

/*box-shadow and text-shadow*/
/*shadow: size x size y blur-radius (optional) spread width color*/
div {
  box-shadow: 10px 10px 5px 12px grey;
  text-shadow: 10px 10px 5px 12px grey;
  text-shadow: 0 0 3px #ff0000, 0 0 5px #0000ff; /*multiple shadow*/
  text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black; /*text border*/
  box-shadow: 10px 10px 5px 12px grey; /*x y r spread*/
  box-shadow: 10px 10px 5px grey inset; /*inner shadow*/
}

/*text effect*/
.crippedAndEllipsis {
  white-space: nowrap; /*no wrap to multiple line (just one) | def: none*/
  width: 200px;
  border: 1px solid #000000;
  overflow: hidden; /*hidden the overfow part (M) | def: visible*/
  text-overflow: clip; /*clip | ellipsis "..."*/
  word-wrap: break-word; /*break the word into multiple line if too long*/
  word-break: keep-all; /*break at hyphen*/
  writing-mode: horizontal-tb; /*skip =))*/
  text-justify: unset; /*skip =))*/
}

/*About font*/
@font-face {
  /*mandatory key*/
  font-family: myFirstFont; /*define own font*/
  src: url(sansation_light.woff);
  font-weight: bold;
}

div {
  font-family: myFirstFont;
}

/*Transforms*/
/*3D:
      rotateX()
      rotateY()
      rotateZ()
  */
.transformsEffect {
  transform: translate(
    50px,
    100px
  ); /*x-axis and y-axis | translateX(x) | translateY(y)*/
  transform: rotate(20deg); /*clockwise*/
  transform: rotate(-20deg); /*counter-clockwise*/
  transform: scale(2, 3); /*scale X and Y | scaleX(scale)| scaleY(scale)*/
  transform: skew(  /*nghieg =))*/
    20deg,
    10deg
  ); /*skew along X-Y axis | skewX(20deg)| skewY(20deg)*/

  transform: matrix(
    1,
    -0.3,
    0,
    1,
    0,
    0
  ); /*skip =)), scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY()*/
}

/*TRASITIONS*/
/*
  To create a transition effect, you must specify two things:
    the CSS property you want to add an effect to (width)
    the duration of the effect - must specify to have effect (2s)
    eg: transition: width 2s
  */
div {
  width: 100px;
  height: 100px;
  background: red;
  transition: width 2s;
}

div:hover {
  /*hover will have transition effect*/
  width: 300px;
}

div {
  transition: width 2s, height 4s;
}

#div1 {
  transition-timing-function: linear;
} /*transition timing effect*/
#div2 {
  transition-timing-function: ease;
} /*lower by the end*/
#div3 {
  transition-timing-function: ease-in;
}
#div4 {
  transition-timing-function: ease-out;
}
#div5 {
  transition-timing-function: ease-in-out;
}
#div6 {
  transition-delay: 1s; /*delay transition =))*/
}

div:hover {
  width: 300px;
  height: 300px;
}

/*further example*/
.normaldiv {
  width: 100px;
  height: 100px;
  background: red;
  transition: width 2s, height 2s, transform 2s;
}

.normaldiv:hover {
  /*start animation when hover - W: 100->300, H: 100->300, rotate: 0->180deg*/
  width: 300px;
  height: 300px;
  transform: rotate(180deg);
}

.shorthand {
  transition: width 2s linear 1s; /*propt duration duration-type delay*/
}

/*ANIMATION*/
/*Define animation
  Animation vs transition
  diff
    - animation can be repeat
    - animation dont need trigger form user (auto change)
    - animation have defined name for reusable perks
  common
    - used to change style from one to another
    - have duration
    - etc
  */

@keyframes example {
  from {
    background-color: red;
  } /*frm style - 0%*/
  to {
    background-color: yellow;
  }
}

@keyframes multipleAnimationOnPercent {
  0% {
    background-color: red;
  }
  25% {
    background-color: yellow;
  }
  50% {
    background-color: blue;
  }
  100% {
    background-color: green;
  }
}

@keyframes furtherMultipleExample {
  0% {
    background-color: red;
    left: 0px;
    top: 0px;
  }
  25% {
    background-color: yellow;
    left: 200px;
    top: 0px;
  }
  50% {
    background-color: blue;
    left: 200px;
    top: 200px;
  }
  75% {
    background-color: green;
    left: 0px;
    top: 200px;
  }
  100% {
    background-color: red;
    left: 0px;
    top: 0px;
  }
}

#div1 {
  animation-timing-function: linear;
}
#div2 {
  animation-timing-function: ease;
}
#div3 {
  animation-timing-function: ease-in;
}
#div4 {
  animation-timing-function: ease-out;
}
#div5 {
  animation-timing-function: ease-in-out;
}

/* animated element (div) */
div {
  width: 100px;
  height: 100px;
  background-color: red;
  animation-name: example; /*animation name: defined by @keyframe*/
  animation-duration: 4s; /*required for element being effected*/
  animation-delay: 2s; /*animation delay*/
  animation-delay: -2s; /*happen 2s ago*/
  animation-iteration-count: 3; /*repeating times*/
  animation-iteration-count: infinite; /*endless run*/
  animation-direction: reverse; /*runing in reverse*/

  animation-iteration-count: 2;
  animation-direction: alternate; /*running forward and backward*/

  animation-iteration-count: 2;
  animation-direction: alternate-reverse; /*backward and forward*/

  animation-fill-mode: forwards; /*remain style after animation end. forwards | backwards*/
}

.shorthand {
  animation-name: example;
  animation-duration: 5s;
  animation-timing-function: linear;
  animation-delay: 2s;
  animation-iteration-count: infinite;
  animation-direction: alternate;
  animation: example 5s linear 2s infinite alternate;
}

/*TOOLTIPS*/
.tooltip {
  position: relative;
  display: inline-block;
  border-bottom: 1px dotted black; /* If you want dots under the hoverable text */
}

/* Tooltip text */
.tooltip .tooltiptext {
  visibility: hidden;
  width: 120px;
  background-color: black;
  color: #fff;
  text-align: center;
  padding: 5px 0;
  border-radius: 6px;

  /* Position the tooltip text - see examples below! */
  position: absolute; /*to position tooltip*/
  z-index: 1;

  top: -5px; /*counter the padding*/
  left: 105%; /*left side*/
  right: 105%;

  bottom: 100%; /*on top*/
  left: 50%;
  margin-left: -60px; /* Use half of the width (120/2 = 60), to center the tooltip */
}

/* Show the tooltip text when you mouse over the tooltip container */
.tooltip:hover .tooltiptext {
  visibility: visible;
}

.tooltip .tooltiptext::after {
  /*arrow. ref: https://www.w3schools.com/css/css_tooltip.asp*/
  /*arrow direction: top (padding) 🡡 bottom 150% 🡣 top 100%*/
  /*
  bottom (padding) 🡣 🡡
  left (padding) 🡢 🡠
  right (padding) 🡠 🡢 
  */

  content: ""; /*must have*/
  position: absolute;
  top: 100%; /*at bottom compared to the positioned parents*/
  left: 50%;
  margin-left: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: black transparent transparent transparent;
}

/*
<div class="tooltip">Hover over me  //add a container to hover
  <span class="tooltiptext">Tooltip text</span>
</div>
*/

/*IMAGE STYLING ADVANCED*/
.imgWithDoubleBorder {
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 5px; /*image with padding. see the effect: https://www.w3schools.com/css/tryit.asp?filename=trycss_ex_images_thumbnail_link*/
  width: 150px;
}

/*
open IMG
  <a href="paris.jpg">
    <img src="paris.jpg" alt="Paris">
  </a>
*/

img:hover {
  box-shadow: 0 0 2px 1px rgba(0, 140, 186, 0.5);
}

.reponsiveImage {
  max-width: 100%; /*fit % of a container*/
  height: auto;
}

.imgCenter {
  display: block;
  margin-left: auto;
  margin-right: auto; /*or margin: auto 0*/

  width: 50%;
  opacity: 0.5; /*transparent image*/
}

/*palaroid image*/
div.polaroid {
  width: 80%;
  background-color: white;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  margin-bottom: 25px;
}

div.container {
  text-align: center;
  padding: 10px 20px;
}

/*Image Hover Overlay Eff: https://www.w3schools.com/css/css3_images.asp*/

/*IMG Flipped*/
img:hover {
  transform: scaleX(-1);
}

/*image responsive*/
.responsive {
  padding: 0 6px;
  float: left;
  width: 24.99999%;
}

@media only screen and (max-width: 700px) {
  /*> 700 => 2 element*/
  .responsive {
    width: 49.99999%;
    margin: 6px 0;
  }
}

@media only screen and (max-width: 500px) {
  /*> 500 => 1 element*/
  .responsive {
    width: 100%;
  }
}

.imageReflect {
  -webkit-box-reflect: below;
  -webkit-box-reflect: right;
  -webkit-box-reflect: below 20px; /*with space between*/
  -webkit-box-reflect: below 0px
    linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.4));
}

/*OPTIONAL CSS The object-fit and object-position Property
The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container.
*/

img {
  width: 200px;
  height: 300px;
  object-fit: cover; /*cropimage*/
  object-fit: contain; /*scale image both X and Y to fit the image*/
}

/*
OPTIONAL Image mask
ref: https://www.w3schools.com/css/css3_masking.asp
*/
.mask1 {
  -webkit-mask-image: url(w3logo.png);
  mask-image: url(w3logo.png);
  -webkit-mask-repeat: no-repeat;
  mask-repeat: no-repeat;
}
/*
<div class="mask1">
  <img src="img_5terre.jpg" alt="Cinque Terre" width="600" height="400">
</div>
*/

/*BUTTONS*/
.buttonColorBorder {
  background-color: white;
  color: black;
  border: 2px solid #4caf50; /* Green */
}

.buttonHoverable {
  transition-duration: 0.4s;
}

.buttonHoverable:hover {
  background-color: #4caf50; /* Green */
  color: rgb(175, 144, 144);
}

.buttonShadowHover {
  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.buttonShadowHover:hover {
  box-shadow: 0 12px 16px 0 rgba(0, 0, 0, 0.24),
    0 17px 50px 0 rgba(0, 0, 0, 0.19);
}

.disableButton {
  /*instead of using style*/
  opacity: 0.6;
  cursor: not-allowed;
}

.buttonNav {
  float: left;
  border: 1px solid green;
}

.buttonNavVertical {
  display: block;
}

/*OTHER EXAMPLE - shoud watch: https://www.w3schools.com/css/css3_buttons.asp*/

/*
PAGINATION EXAMPE
- should watch for practice: https://www.w3schools.com/css/css3_pagination.asp
*/

/*
MULTICOLUMN OF TEXT - display single paragraph of text in multiple columns
- Read later if interesting: https://www.w3schools.com/css/css3_multiple_columns.asp
*/

/*
CSS User Interface css properties
resize: UI to resize
outline-offset: add outline space (extra space from border)
*/

.resizeDiv {
  resize: horizontal;
  resize: vertical;
  resize: both;
  overflow: auto; /*mandatory if you want to have dragging symbol*/
}

.outsetBorder {
  margin: 20px;
  border: 1px solid black;
  outline: 4px solid red;
  outline-offset: 15px;
}

/*CSS VARIABLES
reuseable in @media, reuseable definition such as colors, make it:
  - makes the code easier to read (more understandable)
  - makes it much easier to change the color values 
SYNTAX:
  var(--name, value)
SCOPE: global | local
*/

/*Global scope example*/

:root {
  /*global scope*/
  --blue: #1e90ff;
  --white: #ffffff;
}
/*usage*/
body {
  background-color: var(--blue);
}

h2 {
  border-bottom: 2px solid var(--blue);
}

.container {
  color: var(--blue);
  background-color: var(--white);
  padding: 15px;
}

/*Local override example*/
button {
  --blue: #0000ff; /* local variable will override global */
  --button-blue: #0000ff; /* new local variable */
  background-color: var(--white);
  color: var(--blue);
  border: 1px solid var(--blue);
  padding: 5px;
}

/*(optional) CSS var with vanilla JS: https://www.w3schools.com/css/css3_variables_javascript.asp*/

/*Variable and @Media*/
/* Variable declarations */
:root {
  --blue: #1e90ff;
  --white: #ffffff;
}

.container {
  --fontsize: 25px;
}

@media screen and (min-width: 450px) {  /*when the screen is >= 450*/
  .container {
    --fontsize: 50px;
  }
}

/*BOX-sizing
Without the CSS box-sizing Property
W and H is more than you set ( = H/W + padding + border)
With CSS box-sizing
W and H will auto include padding and border => W and H always the same as you set (witdth: n, height: n ...)
*/
.WandH300 {
  width: 300px;
  height: 100px;
  border: 1px solid blue;
  box-sizing: border-box;
}

.WandHStill300WithPaddingAndBorderIncluded {
  width: 300px;
  height: 100px;
  padding: 50px;
  border: 1px solid red;
  box-sizing: border-box;
}

/*MEDIA Queries
create styling rules based on the capablility of the device, like:
  width and height of the viewport
  width and height of the device
  orientation (is the tablet/phone in landscape or portrait mode?)
  resolution

syntax: @media not|only mediatype and (expressions) {
  CSS-Code;
}
  type: all | print | screen (desktop, mobile..)
*/

@media screen and (min-width: 480px) {
  body {
    background-color: lightgreen;
  }
}

@media screen and (min-width: 480px) {
  #leftsidebar {width: 200px; float: left;}
  #main {margin-left: 216px;}   /*this can help your whole div translate from its left side, not overlapped to the float left contents*/
}

/*More example*/
body {
  background-color: tan;
  color: black;
}

/* On screens that are 992px wide or less, the background color is blue */
@media screen and (max-width: 992px) {
  body {
    background-color: blue;
    color: white;
  }
}

/* On screens that are 600px wide or less, the background color is olive */
@media screen and (max-width: 600px) {
  body {
    background-color: olive;
    color: white;
  }
}

/*CHANGE COLUMN NUMBER*/
/* Create four equal columns that floats next to each other */
.column {
  float: left;
  width: 25%;
}

/* On screens that are 992px wide or less, go from four columns to two columns */
@media screen and (max-width: 992px) {
  .column {
    width: 50%;
  }
}

/* On screens that are 600px wide or less, make the columns stack on top of each other instead of next to each other */
@media screen and (max-width: 600px) {
  .column {
    width: 100%;
  }
}
/*Change the entire layout using @media: https://www.w3schools.com/css/tryit.asp?filename=trycss_mediaqueries_website*/

/*in range @media rules*/
@media screen and (max-width: 900px) and (min-width: 600px) { /*between 600 and 900*/
  div.example {
    font-size: 50px;
    padding: 50px;
    border: 8px solid black;
    background: yellow;
  }
}